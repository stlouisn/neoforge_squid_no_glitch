plugins {
    id "dev.architectury.loom" version "1.7-SNAPSHOT" apply false  // https://github.com/architectury/architectury-loom
    id "architectury-plugin" version "3.4-SNAPSHOT"                // https://github.com/architectury/architectury-plugin
    id "com.gradleup.shadow" version "8.3.0" apply false           // https://gradleup.com/shadow/getting-started/#default-java-groovy-tasks
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version
}

subprojects {

    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'

    repositories {
    }

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings(loom.officialMojangMappings())
//        mappings loom.layered {
//            it.mappings("net.fabricmc:yarn:$rootProject.yarn_mappings:v2")
//            it.mappings("dev.architectury:yarn-mappings-patch-neoforge:$rootProject.neoforge_mappings")
//        }
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21

        manifest {
            attributes([
                    "Specification-Title"     : project.mod_id,
                    "Specification-Vendor"    : project.mod_authors,
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : project.mod_name,
                    "Implementation-Version"  : project.mod_version,
                    "Implementation-Vendor"   : project.mod_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
    }

    processResources {
        def stringProperties = providers.gradlePropertiesPrefixedBy('').get()
        stringProperties.each { inputs.property(it.key, it.value) }

        ["fabric.mod.json", "META-INF/neoforge.mods.toml"].each {
            filesMatching(it) {
                expand(stringProperties) {
                    escapeBackslash = true
                }
            }
        }
    }

}